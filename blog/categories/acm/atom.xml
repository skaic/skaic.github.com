<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: acm | SK's Blog]]></title>
  <link href="http://sunkid.me/blog/categories/acm/atom.xml" rel="self"/>
  <link href="http://sunkid.me/"/>
  <updated>2013-10-29T10:36:53+08:00</updated>
  <id>http://sunkid.me/</id>
  <author>
    <name><![CDATA[sk.c]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2012 GDIT校内模拟赛(续)]]></title>
    <link href="http://sunkid.me/blog/2012/04/09/2012-gdit-contest-2/"/>
    <updated>2012-04-09T19:19:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/09/2012-gdit-contest-2</id>
    <content type="html"><![CDATA[<p>别的话我就不多说了，接着继续昨晚没写完的题解吧。</p>

<h3>Problem 1006</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4193">Non-negative Partial Sums</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个数组，例:a[0],a[1],...,a[n-1]。要你找出数列a[k],a[k+1],...,a[n-1],a[0],a[1],...,a[k]
使这个数列的任意前k项和都大于-1。问有多少个这样的数列。</p>

<br/>


<h4>题解：</h4>

<p>我们注意下这道题的测试数据，N的范围不是很大( N&lt;10<sup>6</sup> ),所以这道题存在较多的解题方法。</p>

<p>比较常用的有下面2种解法：</p>

<p>一是采用线段树求解，这算法比较高效，时间复杂度为O(N)。
没看过线段树的童鞋可以参考下这篇文章 <a href="http://hi.baidu.com/alpc62/blog/item/469edeca0043e382c8176875.html">线段树入门</a></p>

<p>用线段数最主要的目的是为了减少计算区间的遍历时间.</p>

<p>还有一直方法是采用单调队列的方法。百度上搜索到的多是这种方法的题解，用单调队列的时间复杂度为O(N*LogN).</p>

<!--more-->


<h3>Problem 1007</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4144">Bacon's Cipher</a></p>

<br/>


<h4>题意：</h4>

<p>加密一段字符串，加密方法是这样的，我们先把字符A看为0，B为1，C为2，⋯⋯ 等等。现在，
我们就可以将字符串的每人字母用数字来代替。接着，我们将每个代表字母的数字都转成
5位的2进制表示。例如C表示为2代替，转成二进制表示为‘00010’。
然后，我们用随机的大写字母表示0位，用随机的数字表示1位，则’00010‘（’c'）可以转换成
ABC1D 或 XJG5P</p>

<p>现在，给出一个加密后的密文，要求你将其解密为明文。</p>

<br/>


<h4>题解：</h4>

<p>很简单的题目，只要把题意看懂，我相信大家都能完成。</p>

<p>这道题没啥算法可言，只要先把密文按每5位转换成二进制数，再转换为10进制数，就可以求出
明文了。</p>

<h3>Problem 1008</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4143">A Simple Problem</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个正整数n，要求你找出一个最小的正整数x ，同时存在一个正整数y可以满足公式：
y<sup>2</sup> = n + x<sup>2</sup></p>

<br/>


<h4>题解：</h4>

<p>这道题目名叫“一道简单的题目”，但看似简单的题目往往就不简单。。看清楚题意后可以很快
的发现是道数学题，这次一队在最后的时间秒杀了这道题，这位同学的数学应该还是挺不错的。</p>

<p>解题思路大概如下：</p>

<p>先将公式y<sup>2</sup> = n + x<sup>2</sup> 分解为 (y-x)(y+x)=n.然后假设y - x = a,y + x = b. 接着就可以去
遍历a，时间复杂度为O（TN），可是这种做法会超时。n的范围是（n &lt; 10<sup>9</sup> ）,题目没给出T的范围，
但T可以猜出T的范围不会小，因为假如T的时间复杂度可以忽略，那这道题目的T 就没有存在意义了。
所以要找出其他办法。</p>

<p>其实，我们通过均值不等式可以很大程度减少遍历a的次数。首先，对n进行开平方,接着向下开始找因子
a,找到的第一个a，b就是答案。。</p>

<p>详细代码可以看这里：<a href="http://www.linuxso.com/linuxbiancheng/13773.html">2011百校联动“菜鸟杯”程序设计公开赛</a></p>

<h3>Problem 1009</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3308">LCIS</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个数列。然后进行询问：</p>

<p>U A B：表示用B代替数列中A位置的数（数列从0开始记起）</p>

<p>Q A B：表示输出A到B之间的最长公共上升子序列</p>

<h4>题解：</h4>

<p>经典的题目，LCIS，二年级的同学应该看过，没做出来可能是时间紧或者赛前资料没准备充足。
资料准备足的话直接抄经典代码就能A过这道题了 =。=</p>

<p>好吧，我有点懒，就直接贴别人写得比较好的详细解看吧（当然，我写的话也不可能写得有人家好）</p>

<p><a href="http://wenku.baidu.com/view/3e78f223aaea998fcc220ea0.html">最长公共上升子序列的O（ n<sup>2</sup> ）算法</a></p>

<h3>Problem 1010</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1008">Elevator</a></p>

<p>这道题基本所有人都做出来了，大水题，就不费时间写题解了，给个代码凑合下 :)</p>

<p>```c Elevator</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int n;
while(scanf("%d",&amp;n)!=EOF&amp;&amp;n!=0)
{
    int now=0,next,time=0;
    while(n--)
    {
        scanf("%d",&amp;next);
        if(next&gt;=now) time+=(next-now)*6+5;
        else if(next&lt;now) time+=(now-next)*4+5;
        now=next;
    }
    printf("%d\n",time);
}
return 0;
</code></pre>

<p>}
```</p>

<h3>Problem 1011</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1532">Drainage Ditches</a></p>

<p>图论中的经典网络流题目，这也是我学网络流的时候完成的第一道题。原题是USACO的题目。。
按照算法导论的伪代码写就能A过这道题了，也没啥特别要注意的地方。</p>

<br />


<h4>刚刚写好后打了常LOL，又10点半了，又该洗洗睡了，安~ 各位ACMer</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 GDIT校内模拟赛]]></title>
    <link href="http://sunkid.me/blog/2012/04/08/2012-gdit-contest/"/>
    <updated>2012-04-08T21:09:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/08/2012-gdit-contest</id>
    <content type="html"><![CDATA[<p>今年的广东省赛提前了一个月在华南农业大学进行，珠海市市赛延迟到5月，不知道今年acm协会是
怎么安排的-。-</p>

<p>说回来，前几天老师说弄场校内模拟赛测试下，为了公平，这次选题就由不参加的我挑选了。
比赛题目全部是由杭电的题库选取的，总体说题目还是偏简单的，水分偏多，这是考虑到大一
的学生接触的时间比较短，所以这套题目应该还算合适的。</p>

<p>下面是这次模拟赛的题解:</p>

<h3>Problem 1001</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003">Max Sum</a></p>

<p>这是道经典的动态规划题目，我最初学动态规划完成的就是这道题了，题意是求最大连续子序列和。</p>

<p>状态转移方程是：DP[i] = max{DP[i-1]+data[i],0},最后,DP数组中最大的值就是答案了。</p>

<p>代码：
``` c Problem 1001</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;malloc.h></h1>

<p>int main()
{</p>

<pre><code>short int a;
int t,i,x=1,n,max,sum,right,letf,b;
scanf("%d",&amp;t);
while(t--)
{
    scanf("%d",&amp;n);
    for(i=b=0,max=-1001,sum=0;i&lt;n;i++)
    {
        scanf("%d",&amp;a);
        if(max&lt;sum+a)
        {
            max=sum+a;
            letf=b;
            right=i;
        }
        sum+=a;
        if(sum&lt;0)
        {
            b=i+1;
            sum=0;
        }
    }
    printf(t?"Case %d:\n%d %d %d\n\n":"Case %d:\n%d %d %d\n",x++,max,letf+1,right+1);
}
return 0;
</code></pre>

<p>}
```</p>

<!--more-->


<h3>Problem 1002</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1021">Fibonacci Again</a></p>

<p>这题第一眼看上去很简单，然后发现似乎不对，再想一想发现真的灰常简单，囧~~</p>

<p>不解释，看代码：
``` c Fibonacci Again</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int n;
while(scanf("%d",&amp;n)!=EOF)
{
    if((n-2)%4==0) printf("yes\n");
    else printf("no\n");
}
return 0;
</code></pre>

<p>}
```</p>

<h3>Problem 1003</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1005">Number Sequence</a></p>

<p>基础题,字符串匹配,KMP算法. 没做出来的同学可以看看: <a href="http://www.matrix67.com/blog/archives/115">KMP算法详解</a></p>

<p>``` c</p>

<h1>include&lt;stdio.h></h1>

<h1>define MAXN 10001</h1>

<h1>define _match(a,b) ((a)==(b))</h1>

<p>typedef int elem_t;</p>

<p>int pat_match(int ls,elem_t<em> str,int lp,elem_t</em> pat)
{</p>

<pre><code>int fail[MAXN]={-1},i=0,j;
for (j=1;j&lt;lp;j++)
{
    for (i=fail[j-1];i&gt;=0&amp;&amp;!_match(pat[i+1],pat[j]);i=fail[i]);
    fail[j]=(_match(pat[i+1],pat[j])?i+1:-1);
}
for (i=j=0;i&lt;ls&amp;&amp;j&lt;lp;i++)
if (_match(str[i],pat[j]))
j++;
else if (j)
j=fail[j-1]+1,i--;
return j==lp?(i-lp)+1:-1;
</code></pre>

<p>}  <br/>
int str[1000000],str1[10001];
void main()
{</p>

<pre><code>int n,m,t,i;
scanf("%d",&amp;t);
while(t--)
{
    scanf("%d%d",&amp;n,&amp;m);
    for(i=0;i&lt;n;i++)
        scanf("%d",&amp;str[i]);
    for(i=0;i&lt;m;i++)
        scanf("%d",&amp;str1[i]);
    printf("%d\n",pat_match(n,str,m,str1));
}
</code></pre>

<p>}
```</p>

<h3>Problem 1004</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009">FatMouse' Trade</a></p>

<br/>


<h4>题意:</h4>

<p>老鼠有M磅猫食。有N个房间，每个房间前有一只猫，房间里有老鼠最喜欢的食品JavaBean,J[i]。
若要引开猫，必须付出相应的猫食F[i]。当然这只老鼠没必要每次都付出所有的F[i]。若它付出
F[i]的a%，则得到J[i]的a%。求老鼠能吃到的做多的JavaBean</p>

<br/>


<h4>解题思路：</h4>

<p>可以用动态规划解决，用贪心思路也一样可以，而且贪心的思路比较容易想到，大概是这样的：</p>

<p>我们将J[i]/F[i],可以得到这一房间每1猫食可以换取到多少JavaBean。当然，老鼠要优先换取
j[i]/F[i]比较大的房间的JavaBean。</p>

<h4>代码：</h4>

<p>``` c FatMouse' Trade</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<p>typedef struct jf
{</p>

<pre><code>double j;
double f;
double average;
</code></pre>

<p>}JF;
int compare(const void <em>a,const void </em>b)
{</p>

<pre><code>JF *aa=(JF *)a;
JF *bb=(JF *)b;
if((aa-&gt;average)&gt;(bb-&gt;average))
    return -1;
else if((aa-&gt;average)&lt;(bb-&gt;average))
     return 1;
else return 0;
</code></pre>

<p>}
int main()
{</p>

<pre><code>int n,m;
while(scanf("%d%d",&amp;m,&amp;n)!=EOF&amp;&amp;n!=-1&amp;&amp;m!=-1)
{
    JF k[1000];
    int i;
    double sum;
    for(i=0;i&lt;n;i++)
    {    
        scanf("%lf %lf",&amp;k[i].j,&amp;k[i].f);
        k[i].average=k[i].j/k[i].f;
    }
    qsort(k,n,sizeof(JF),compare);
    for(i=0,sum=0;i&lt;n&amp;&amp;m&gt;0;i++)
    {
        if(k[i].f&lt;=m)
        {
            m-=k[i].f;
            sum+=k[i].j;
        }
        else 
        {
            sum+=k[i].average*m;
            m=0;
        }
    }
    printf("%.3f\n",sum);

}
return 0;
</code></pre>

<p>}</p>

<p>```</p>

<h3>Problem 1005</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1254">推箱子</a></p>

<p>搜索题，但是比普通的搜索会麻烦上一点，你得考虑上箱子能不能被推动的情况，这需要满足些条件。</p>

<ol>
<li>移动方向前没墙。</li>
<li>移动方向后没墙。</li>
<li>人可以走到箱子的后面。（注意判断这个条件）</li>
</ol>


<p>用广度搜索可以找到最少的推动格子数，但是还得用深度搜索去检查人能否走到箱子的后面</p>

<p>这题代码比较长，我没去写，就不提供代码了。</p>

<br/>


<h4>好吧，今晚先写到这了，剩下的明天继续吧，回去洗洗睡了。</h4>
]]></content>
  </entry>
  
</feed>
