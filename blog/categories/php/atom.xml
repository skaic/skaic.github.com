<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | SK's Blog]]></title>
  <link href="http://sunkid.me/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://sunkid.me/"/>
  <updated>2014-04-10T15:45:37+08:00</updated>
  <id>http://sunkid.me/</id>
  <author>
    <name><![CDATA[sk.c]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[php扩展练习]]></title>
    <link href="http://sunkid.me/blog/2013/12/11/php-ext-1/"/>
    <updated>2013-12-11T11:13:00+08:00</updated>
    <id>http://sunkid.me/blog/2013/12/11/php-ext-1</id>
    <content type="html"><![CDATA[<p>关于php扩展的资料已经很丰富了，你可以在<a href="http://sunkid.me/blog/2013/11/05/php-book/">这里</a>找到系统学习的资源。</p>

<p>纸上得来终觉浅 绝知此事要躬行。为此创建了个练习项目来巩固上面学到的知识。
源码放在<a href="https://github.com/skaic/sunkid_phpext">这里</a>, 希望对你也有用 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php书籍整理]]></title>
    <link href="http://sunkid.me/blog/2013/11/05/php-book/"/>
    <updated>2013-11-05T12:18:00+08:00</updated>
    <id>http://sunkid.me/blog/2013/11/05/php-book</id>
    <content type="html"><![CDATA[<pre><code>感谢这些PHP书籍作者和博客们的无私奉献，PHP因为有你更出色 :)
</code></pre>

<h3>必读</h3>

<ul>
<li><a href="http://wulijun.github.io/php-the-right-way/">PHP之道</a></li>
<li><a href="http://www.laruence.com/2010/06/21/1608.html">PHP调试技术手册</a></li>
<li><a href="http://phpbestpractices.justjavac.com/">PHP 最佳实践</a></li>
<li><a href="https://code.google.com/p/pasc2at/wiki/SimplifiedChinese">高级PHP应用程序漏洞审核技术</a></li>
<li><a href="http://feiyang.me/2013/03/php-psr-in-chinese/">PHP的PSR规范中文版</a></li>
</ul>


<!-- more -->


<h3>深入</h3>

<ul>
<li><a href="https://github.com/walu/phpbook">PHP扩展开发及内核应用</a></li>
<li><a href="https://github.com/reeze/tipi">深入理解PHP内核</a></li>
<li><a href="http://www.php.net/manual/zh/internals2.php">php核心:骇客指南</a></li>
</ul>


<h3>博客</h3>

<ul>
<li><a href="http://www.laruence.com/">风雪之隅</a></li>
<li><a href="http://blog.csdn.net/heiyeshuwu">黑夜路人</a></li>
<li><a href="http://yanbin.org/">抚琴居</a></li>
<li><a href="http://www.imsiren.com/">斯人博客</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 序列化的几种方法比较]]></title>
    <link href="http://sunkid.me/blog/2012/05/28/php-efficiency-of-serialize/"/>
    <updated>2012-05-28T22:08:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/05/28/php-efficiency-of-serialize</id>
    <content type="html"><![CDATA[<p>最近看Thinkphp源码，看到里面的F函数，用var_export方法对数组进行序列化保存到文本来做缓存。
这是头次见到的，有点疑惑是否TP的这种方法会不会快点呢？于是有了下面的几个小测试</p>

<!--more-->


<p>首先测试ThinkPHP的var_export对序列化和反序列化的效率
```php ThinkPhp
&lt;?php
// 去除代码中的空白和注释
//ThinkPhp 的函数
function strip_whitespace($content) {</p>

<pre><code>$stripStr = '';
//分析php源码
$tokens = token_get_all($content);
$last_space = false;
for ($i = 0, $j = count($tokens); $i &lt; $j; $i++) {
    if (is_string($tokens[$i])) {
        $last_space = false;
        $stripStr .= $tokens[$i];
    } else {
        switch ($tokens[$i][0]) {
            //过滤各种PHP注释
            case T_COMMENT:
            case T_DOC_COMMENT:
                break;
            //过滤空格
            case T_WHITESPACE:
                if (!$last_space) {
                    $stripStr .= ' ';
                    $last_space = true;
                }
                break;
            case T_START_HEREDOC:
                $stripStr .= "&lt;&lt;&lt;THINK\n";
                break;
            case T_END_HEREDOC:
                $stripStr .= "THINK;\n";
                for ($k = $i + 1; $k &lt; $j; $k++) {
                    if (is_string($tokens[$k]) &amp;&amp; $tokens[$k] == ";") {
                        $i = $k;
                        break;
                    } else if ($tokens[$k][0] == T_CLOSE_TAG) {
                        break;
                    }
                }
                break;
            default:
                $last_space = false;
                $stripStr .= $tokens[$i][1];
        }
    }
}
return $stripStr;
</code></pre>

<p>}</p>

<p>//创建数组函数
function createArray($i){</p>

<pre><code>$array = array();
for($k=0;$k&lt;$i;$k++){
    $array[$k] = $k; 
}
return $array;
</code></pre>

<p>}</p>

<p>$data = createArray(10000);</p>

<p>$start = microtime(TRUE);
$sdata = var_export($data, true);
file_put_contents("tp.php", strip_whitespace("&lt;?php\nreturn " . $sdata . ";\n?>"));
$end = microtime(TRUE);
echo "serialize time:";
echo $end - $start;
echo "(s), ";
echo "serialize longth:".strlen($sdata);
echo "<br/>";</p>

<p>$start = microtime(TRUE);
$data = include "tp.php";//反序列号
$end = microtime(TRUE);
echo "unserialize time:";
echo $end - $start;
echo "(s)";
?>
```</p>

<p><code>bash
serialize time:0.18270683288574(s), serialize longth:157789
unserialize time:0.0076150894165039(s)
</code></p>

<p>由于上面的方法要把数据写入文件，所以为了做比较，下面的序列化和反序列化也都写到文件后再读出来，
接着，测试的是传统serialize函数
```php serialize
&lt;?php
function createArray($i){</p>

<pre><code>$array = array();
for($k=0;$k&lt;$i;$k++){
    $array[$k] = $k; 
}
return $array;
</code></pre>

<p>}</p>

<p>$data = createArray(10000);
$start = microtime(TRUE);
$sdata =  serialize($data); //序列化
file_put_contents("se.php", $sdata);
$end = microtime(TRUE);
echo "sertialize time:";
echo $end - $start;
echo "(s), ";
echo "sertialize longth:".strlen($sdata);
echo "<br/>";</p>

<p>$start = microtime(TRUE);
$rdata = file_get_contents("se.php");
$data = unserialize($rdata); //反序列化
$end = microtime(TRUE);
echo "unserialize time:";
echo $end - $start;
echo "(s)";
?>
```</p>

<p><code>bash
sertialize time:0.0031681060791016(s), sertialize longth:137790
unserialize time:0.0037140846252441(s)
</code></p>

<p>再看看用json做序列化的效果
```php json
&lt;?php
function createArray($i){</p>

<pre><code>$array = array();
for($k=0;$k&lt;$i;$k++){
    $array[$k] = $k; 
}
return $array;
</code></pre>

<p>}</p>

<p>$data = createArray(10000);
$start = microtime(TRUE);
$sdata =  json_encode($data);  //序列化
file_put_contents("js.php", $sdata);
$end = microtime(TRUE);
echo "sertialize time:";
echo $end - $start;
echo "(s), ";
echo "sertialize longth:".strlen($sdata);
echo "<br/>";</p>

<p>$start = microtime(TRUE);
$rdata = file_get_contents("js.php");
$data = json_decode($rdata，TRUE);  //反序列化，
$end = microtime(TRUE);
echo "unserialize time:";
echo $end - $start;
echo "(s)";
?>
```</p>

<p><code>bash
sertialize time:0.00067996978759766(s), sertialize longth:48891
unserialize time:0.0031712055206299(s)
</code></p>

<p>从上面的几个小测试可以看出，json_encode 和 serialize 的转换效率其实是很接近的，但是因为
json_encode 序列化后的数据会比serialize序列化的数据小很多（从测试数据比较少了3倍多），
导致在写文本的时候，serialize方法比json_encode方法消耗多了很多时间。而thinkphp采用的文
件缓存效率相对较低，也不清楚thinkphp是出于哪种原因而采用这种办法。希望Thinkphp以后会修改
F方法的缓存方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php5.4下安装drupal7.12的注意事项]]></title>
    <link href="http://sunkid.me/blog/2012/04/28/install-drupal7-dot-12-for-php5-dot-4/"/>
    <updated>2012-04-28T17:42:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/28/install-drupal7-dot-12-for-php5-dot-4</id>
    <content type="html"><![CDATA[<p>自从在我的mac下把php升级到5.4后，就没少折腾过，这次折腾的是安装drupal 7.12。
目前官网最新的版本，还没兼容php 5.4，需要我们自己打2个补丁，包括几个环境配置上
需要注意的地方。</p>

<p>我们先看下第一个报错信息和相应的补丁包</p>

<p><code>
Notice: Array to string conversion in menu_link_save()
(line 3155 of /Users/skc/NetBeansProjects/drupal7/includes/menu.inc).
</code></p>

<p>这个错误的讨论可以看这里：<a href="http://drupal.org/node/1338282#comment-5719166">Fix php notice in menu_link_save( )</a></p>

<p>我采用的解决补丁包是15#的这个：<a href="http://drupal.org/files/menu-link-save-1338282-15.patch">menu-link-save-1338282-15.patch</a></p>

<!--more-->


<p>给代码搭补丁的方式很简单，先下载patch文件到drupal的目录，然后执行命令</p>

<p><code>bash
patch -p2 &lt; menu-link-save-1338282-15.patch
</code></p>

<p>相关patch的命令资料也可以在这找到:<a href="http://study.chyangwa.com/IT/AIX/aixcmds4/patch.htm">patch</a></p>

<p>你可能还会遇到这样的错误：</p>

<p><code>
Warning: Illegal string offset 'field' in DatabaseCondition-&gt;__clone()
(line 1901 of /Users/skc/NetBeansProjects/drupal7/includes/database/query.inc).
</code></p>

<p>官网的讨论组也给出了相应的补丁包：<a href="http://drupal.org/files/database-query-clone-1414412.patch">database-query-clone-1414412.patch</a></p>

<p>如果你在还没安装补丁包之前尝试了安装，可能会出现
<a href="http://drupal.org/node/1171756#comment-5842376">“The 31 tables problem”</a>
（数据库只生成了31张表）。如果你出现这种情况，可以通过下面几个步骤解决。</p>

<pre><code>1. Clearing the database cache.
2. Dropping and recreating the database.
3. Making the entire directory tree (files and directories) world-writeable.
4. setting apc.stat=1 (and restarting Apache).
5. Setting wincache.ocenabled=0 (and restarting Apache).
6. Clearing the browser cache.
7. Switching among different browser families (Firefox, Chrome, IE) on different OSes (XP, Vista, Xubuntu).
8. Not installing into a subdirectory of the document root.
9. Only using the default .htaccess shipped with the source.
10. Stripping all other content from the document root.
</code></pre>

<p>这就是我目前在自己环境下遇到的几个问题，也许在不同的环境又会有其他的问题。比较庆幸的是drupal官网的讨论相当热烈，在上面基本可以找到大部分问题的解决办法（其中很多解决办法是来自开发者提供的）。</p>

<p>如果你遇到其他的问题，尽可试试在drupal讨论组寻找下答案 ^.^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php配置文件加载错误(php.ini)]]></title>
    <link href="http://sunkid.me/blog/2012/04/16/php-configuration-file-path/"/>
    <updated>2012-04-16T18:38:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/16/php-configuration-file-path</id>
    <content type="html"><![CDATA[<p>最近在编译安装<a href="http://pecl.php.net/package/apc">APC</a>的时候，发现php一直加载不到APC模块。在确认编译没有错误后，开始从php上找问题。</p>

<p>结果发现个很坑爹的事</p>

<p><img src="/images/post/php_conf.jpg"></p>

<p>php的info页面显示的配置文件位置和用php --ini 命令显示不同，这里php --ini显示的配置文件目录才是php真正的加载目录，
导致我配置的时候编辑"/usr/local/ect/"目录下的php.ini一直没有生效，所以APC的模块也一直没加载到。</p>

<p>而这个情况的起因原来是因为我重新configure,但没有make clean!!</p>

<h3>囧</h3>

<p>被自己坑了。</p>
]]></content>
  </entry>
  
</feed>
